# Generated by Django 4.2.23 on 2025-07-29 15:43

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('jobs', '0004_jobapplication_selected_resume'),
        ('startups', '0002_initial'),
        ('posts', '0008_alter_postlink_options_and_more'),
        ('users', '0007_alter_user_first_name_alter_user_last_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(max_length=300)),
                ('category', models.CharField(choices=[('profile', 'Profile Completion'), ('social', 'Social Engagement'), ('content', 'Content Creation'), ('networking', 'Networking'), ('startup', 'Startup Activities'), ('jobs', 'Job Activities'), ('special', 'Special Events')], max_length=20)),
                ('rarity', models.CharField(choices=[('common', 'Common'), ('uncommon', 'Uncommon'), ('rare', 'Rare'), ('epic', 'Epic'), ('legendary', 'Legendary')], default='common', max_length=20)),
                ('icon', models.CharField(default='üèÜ', max_length=50)),
                ('color', models.CharField(default='#FFD700', max_length=7)),
                ('image', models.ImageField(blank=True, null=True, upload_to='achievements/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'svg'])])),
                ('requirements', models.JSONField(default=dict, help_text='JSON object defining achievement requirements')),
                ('points', models.PositiveIntegerField(default=10)),
                ('badge_text', models.CharField(blank=True, max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('is_secret', models.BooleanField(default=False)),
                ('is_repeatable', models.BooleanField(default=False)),
                ('earned_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['category', 'rarity', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CollectionCollaborator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission_level', models.CharField(choices=[('view', 'Can View'), ('comment', 'Can Comment'), ('edit', 'Can Edit'), ('admin', 'Admin Access')], default='edit', max_length=10)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('added_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='added_collaborators', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('story_type', models.CharField(choices=[('text', 'Text Story'), ('image', 'Image Story'), ('video', 'Video Story'), ('link', 'Link Story'), ('achievement', 'Achievement Story')], default='text', max_length=20)),
                ('text_content', models.TextField(blank=True, max_length=500)),
                ('image', models.ImageField(blank=True, null=True, upload_to='stories/images/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'gif', 'webp'])])),
                ('video', models.FileField(blank=True, null=True, upload_to='stories/videos/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['mp4', 'webm', 'mov'])])),
                ('link_url', models.URLField(blank=True)),
                ('link_title', models.CharField(blank=True, max_length=200)),
                ('link_description', models.TextField(blank=True, max_length=300)),
                ('is_active', models.BooleanField(default=True)),
                ('expires_at', models.DateTimeField()),
                ('background_color', models.CharField(default='#3B82F6', max_length=7)),
                ('text_color', models.CharField(default='#FFFFFF', max_length=7)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stories', to=settings.AUTH_USER_MODEL)),
                ('related_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stories', to='jobs.job')),
                ('related_startup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stories', to='startups.startup')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserFollow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('notify_on_posts', models.BooleanField(default=True)),
                ('notify_on_stories', models.BooleanField(default=True)),
                ('notify_on_achievements', models.BooleanField(default=False)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL)),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserAchievementProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_progress', models.JSONField(default=dict)),
                ('progress_percentage', models.FloatField(default=0.0)),
                ('is_completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievement_progress', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('progress_data', models.JSONField(blank=True, default=dict)),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to='users.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-earned_at'],
            },
        ),
        migrations.CreateModel(
            name='StoryView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('view_duration', models.PositiveIntegerField(default=0)),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='story_views', to='users.story')),
                ('viewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='story_views', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StartupCollection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, max_length=500)),
                ('collection_type', models.CharField(choices=[('public', 'Public Collection'), ('private', 'Private Collection'), ('collaborative', 'Collaborative Collection')], default='public', max_length=20)),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='collections/covers/%Y/%m/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'webp'])])),
                ('theme_color', models.CharField(default='#3B82F6', max_length=7)),
                ('is_featured', models.BooleanField(default=False)),
                ('allow_comments', models.BooleanField(default=True)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('follower_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('collaborators', models.ManyToManyField(blank=True, related_name='collaborated_collections', through='users.CollectionCollaborator', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='startup_collections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='ScheduledPost',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('content', models.TextField()),
                ('post_type', models.CharField(choices=[('discussion', 'Discussion'), ('question', 'Question'), ('announcement', 'Announcement'), ('resource', 'Resource'), ('event', 'Event')], default='discussion', max_length=20)),
                ('scheduled_for', models.DateTimeField()),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('published', 'Published'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('images_data', models.JSONField(blank=True, default=list)),
                ('links_data', models.JSONField(blank=True, default=list)),
                ('topics_data', models.JSONField(blank=True, default=list)),
                ('is_anonymous', models.BooleanField(default=False)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheduled_posts', to=settings.AUTH_USER_MODEL)),
                ('published_post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scheduled_from', to='posts.post')),
                ('related_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='jobs.job')),
                ('related_startup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='startups.startup')),
            ],
            options={
                'ordering': ['scheduled_for'],
            },
        ),
        migrations.CreateModel(
            name='CollectionItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('custom_note', models.TextField(blank=True, max_length=300)),
                ('custom_tags', models.JSONField(blank=True, default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('position', models.PositiveIntegerField(default=0)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('added_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='users.startupcollection')),
                ('startup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collection_items', to='startups.startup')),
            ],
            options={
                'ordering': ['position', '-added_at'],
            },
        ),
        migrations.CreateModel(
            name='CollectionFollow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('followed_at', models.DateTimeField(auto_now_add=True)),
                ('notify_on_updates', models.BooleanField(default=True)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collection_followers', to='users.startupcollection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followed_collections', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='collectioncollaborator',
            name='collection',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.startupcollection'),
        ),
        migrations.AddField(
            model_name='collectioncollaborator',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='achievement',
            index=models.Index(fields=['category', 'is_active'], name='users_achie_categor_737747_idx'),
        ),
        migrations.AddIndex(
            model_name='achievement',
            index=models.Index(fields=['rarity', '-earned_count'], name='users_achie_rarity_3984ef_idx'),
        ),
        migrations.AddIndex(
            model_name='userfollow',
            index=models.Index(fields=['follower', '-created_at'], name='users_userf_followe_b6d69c_idx'),
        ),
        migrations.AddIndex(
            model_name='userfollow',
            index=models.Index(fields=['following', '-created_at'], name='users_userf_followi_dddc36_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userfollow',
            unique_together={('follower', 'following')},
        ),
        migrations.AddIndex(
            model_name='userachievementprogress',
            index=models.Index(fields=['user', 'is_completed'], name='users_usera_user_id_35da79_idx'),
        ),
        migrations.AddIndex(
            model_name='userachievementprogress',
            index=models.Index(fields=['achievement', '-progress_percentage'], name='users_usera_achieve_9bac55_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userachievementprogress',
            unique_together={('user', 'achievement')},
        ),
        migrations.AddIndex(
            model_name='userachievement',
            index=models.Index(fields=['user', '-earned_at'], name='users_usera_user_id_5cbb50_idx'),
        ),
        migrations.AddIndex(
            model_name='userachievement',
            index=models.Index(fields=['achievement', '-earned_at'], name='users_usera_achieve_74fb7c_idx'),
        ),
        migrations.AddIndex(
            model_name='userachievement',
            index=models.Index(fields=['user', 'is_pinned', 'is_public'], name='users_usera_user_id_ef72b9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userachievement',
            unique_together={('user', 'achievement')},
        ),
        migrations.AddIndex(
            model_name='storyview',
            index=models.Index(fields=['story', '-viewed_at'], name='users_story_story_i_da6423_idx'),
        ),
        migrations.AddIndex(
            model_name='storyview',
            index=models.Index(fields=['viewer', '-viewed_at'], name='users_story_viewer__6171e9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='storyview',
            unique_together={('story', 'viewer')},
        ),
        migrations.AddIndex(
            model_name='story',
            index=models.Index(fields=['author', '-created_at'], name='users_story_author__63f423_idx'),
        ),
        migrations.AddIndex(
            model_name='story',
            index=models.Index(fields=['is_active', 'expires_at'], name='users_story_is_acti_0dd578_idx'),
        ),
        migrations.AddIndex(
            model_name='story',
            index=models.Index(fields=['-created_at', 'is_active'], name='users_story_created_16e73c_idx'),
        ),
        migrations.AddIndex(
            model_name='startupcollection',
            index=models.Index(fields=['owner', '-created_at'], name='users_start_owner_i_bf248d_idx'),
        ),
        migrations.AddIndex(
            model_name='startupcollection',
            index=models.Index(fields=['collection_type', '-updated_at'], name='users_start_collect_ff3d03_idx'),
        ),
        migrations.AddIndex(
            model_name='startupcollection',
            index=models.Index(fields=['is_featured', '-updated_at'], name='users_start_is_feat_6cea56_idx'),
        ),
        migrations.AddIndex(
            model_name='scheduledpost',
            index=models.Index(fields=['author', 'status', 'scheduled_for'], name='users_sched_author__5a6333_idx'),
        ),
        migrations.AddIndex(
            model_name='scheduledpost',
            index=models.Index(fields=['status', 'scheduled_for'], name='users_sched_status_72d098_idx'),
        ),
        migrations.AddIndex(
            model_name='scheduledpost',
            index=models.Index(fields=['-created_at'], name='users_sched_created_bacc4f_idx'),
        ),
        migrations.AddIndex(
            model_name='collectionitem',
            index=models.Index(fields=['collection', 'position'], name='users_colle_collect_ba1999_idx'),
        ),
        migrations.AddIndex(
            model_name='collectionitem',
            index=models.Index(fields=['startup', '-added_at'], name='users_colle_startup_45188e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='collectionitem',
            unique_together={('collection', 'startup')},
        ),
        migrations.AddIndex(
            model_name='collectionfollow',
            index=models.Index(fields=['user', '-followed_at'], name='users_colle_user_id_304929_idx'),
        ),
        migrations.AddIndex(
            model_name='collectionfollow',
            index=models.Index(fields=['collection', '-followed_at'], name='users_colle_collect_8e39b9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='collectionfollow',
            unique_together={('user', 'collection')},
        ),
        migrations.AlterUniqueTogether(
            name='collectioncollaborator',
            unique_together={('collection', 'user')},
        ),
    ]
