# Generated by Django 5.2.1 on 2025-07-12 07:34

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('startups', '0002_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Space',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('icon', models.CharField(default='ðŸ‘¥', max_length=10)),
                ('cover_image_url', models.URLField(blank=True)),
                ('space_type', models.CharField(choices=[('public', 'Public'), ('private', 'Private'), ('invite_only', 'Invite Only')], default='public', max_length=20)),
                ('auto_approve_members', models.BooleanField(default=True)),
                ('allow_member_posts', models.BooleanField(default=True)),
                ('require_post_approval', models.BooleanField(default=False)),
                ('member_count', models.PositiveIntegerField(default=0)),
                ('post_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_spaces', to=settings.AUTH_USER_MODEL)),
                ('moderators', models.ManyToManyField(blank=True, related_name='moderated_spaces', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-member_count', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('event_type', models.CharField(choices=[('meetup', 'Meetup'), ('workshop', 'Workshop'), ('pitch', 'Pitch Event'), ('networking', 'Networking'), ('webinar', 'Webinar')], max_length=20)),
                ('start_datetime', models.DateTimeField()),
                ('end_datetime', models.DateTimeField()),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('is_online', models.BooleanField(default=True)),
                ('location', models.CharField(blank=True, max_length=200)),
                ('meeting_url', models.URLField(blank=True)),
                ('requires_registration', models.BooleanField(default=True)),
                ('max_attendees', models.PositiveIntegerField(blank=True, null=True)),
                ('registration_deadline', models.DateTimeField(blank=True, null=True)),
                ('is_published', models.BooleanField(default=False)),
                ('is_cancelled', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hosted_events', to=settings.AUTH_USER_MODEL)),
                ('space', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='connect.space')),
            ],
            options={
                'ordering': ['start_datetime'],
            },
        ),
        migrations.CreateModel(
            name='SpaceMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('member', 'Member'), ('moderator', 'Moderator'), ('admin', 'Admin')], default='member', max_length=20)),
                ('is_approved', models.BooleanField(default=True)),
                ('is_banned', models.BooleanField(default=False)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('banned_at', models.DateTimeField(blank=True, null=True)),
                ('banned_reason', models.TextField(blank=True)),
                ('space', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='connect.space')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='space_memberships', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar_url', models.URLField(blank=True, help_text='Profile picture URL')),
                ('headline', models.CharField(blank=True, max_length=200)),
                ('expertise', models.JSONField(default=list)),
                ('looking_for', models.JSONField(default=list)),
                ('linkedin_url', models.URLField(blank=True)),
                ('twitter_handle', models.CharField(blank=True, max_length=50)),
                ('github_username', models.CharField(blank=True, max_length=50)),
                ('personal_website', models.URLField(blank=True)),
                ('is_open_to_opportunities', models.BooleanField(default=True)),
                ('preferred_contact_method', models.CharField(choices=[('platform', 'Platform Messages'), ('email', 'Email'), ('linkedin', 'LinkedIn')], default='platform', max_length=20)),
                ('reputation_score', models.IntegerField(default=0)),
                ('helpful_votes', models.IntegerField(default=0)),
                ('follower_count', models.IntegerField(default=0)),
                ('following_count', models.IntegerField(default=0)),
                ('badges', models.JSONField(default=list)),
                ('show_online_status', models.BooleanField(default=True)),
                ('allow_direct_messages', models.BooleanField(default=True)),
                ('email_on_mention', models.BooleanField(default=True)),
                ('email_on_reply', models.BooleanField(default=True)),
                ('email_on_follow', models.BooleanField(default=True)),
                ('last_seen', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='connect_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CofounderMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skills', models.JSONField(default=list)),
                ('experience_years', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('commitment_level', models.CharField(choices=[('full_time', 'Full-time'), ('part_time', 'Part-time'), ('advisory', 'Advisory')], max_length=20)),
                ('equity_expectation', models.CharField(blank=True, max_length=50)),
                ('looking_for_skills', models.JSONField(default=list)),
                ('startup_stage_preference', models.CharField(choices=[('idea', 'Idea Stage'), ('mvp', 'MVP Stage'), ('revenue', 'Revenue Stage'), ('growth', 'Growth Stage')], max_length=20)),
                ('bio', models.TextField()),
                ('achievements', models.TextField(blank=True)),
                ('ideal_cofounder', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('industry_preferences', models.ManyToManyField(blank=True, to='startups.industry')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cofounder_profiles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['is_active', '-created_at'], name='connect_cof_is_acti_3a2753_idx')],
            },
        ),
        migrations.CreateModel(
            name='EventRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('registered', 'Registered'), ('waitlisted', 'Waitlisted'), ('attended', 'Attended'), ('no_show', 'No Show'), ('cancelled', 'Cancelled')], default='registered', max_length=20)),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('attended_at', models.DateTimeField(blank=True, null=True)),
                ('cancelled_at', models.DateTimeField(blank=True, null=True)),
                ('registration_notes', models.TextField(blank=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='connect.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_registrations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['event', 'status'], name='connect_eve_event_i_ec34c6_idx'), models.Index(fields=['user', '-registered_at'], name='connect_eve_user_id_45399e_idx')],
                'unique_together': {('event', 'user')},
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following_relationships', to=settings.AUTH_USER_MODEL)),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follower_relationships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['follower', '-created_at'], name='connect_fol_followe_53e808_idx'), models.Index(fields=['following', '-created_at'], name='connect_fol_followi_b3caaa_idx')],
                'unique_together': {('follower', 'following')},
            },
        ),
        migrations.CreateModel(
            name='MatchScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('skills_complementarity', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('interest_alignment', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('experience_balance', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('calculated_at', models.DateTimeField(auto_now=True)),
                ('interaction_count', models.PositiveIntegerField(default=0)),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_scores_as_user1', to=settings.AUTH_USER_MODEL)),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_scores_as_user2', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['-overall_score'], name='connect_mat_overall_125ca7_idx'), models.Index(fields=['user1', '-overall_score'], name='connect_mat_user1_i_6bc3e7_idx')],
                'unique_together': {('user1', 'user2')},
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('follow', 'New Follower'), ('mention', 'Mentioned in Post'), ('comment', 'Comment on Your Post'), ('reply', 'Reply to Your Comment'), ('like', 'Post Liked'), ('event_reminder', 'Event Reminder'), ('space_invite', 'Space Invitation'), ('cofounder_match', 'Potential Co-founder Match')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('post_id', models.UUIDField(blank=True, null=True)),
                ('comment_id', models.UUIDField(blank=True, null=True)),
                ('space_id', models.UUIDField(blank=True, null=True)),
                ('event_id', models.UUIDField(blank=True, null=True)),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('from_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sent_notifications', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='connect_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'is_read', '-created_at'], name='connect_not_user_id_35316c_idx')],
            },
        ),
        migrations.CreateModel(
            name='ResourceTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('pitch_deck', 'Pitch Deck'), ('business_plan', 'Business Plan'), ('legal', 'Legal Documents'), ('marketing', 'Marketing Materials'), ('financial', 'Financial Models'), ('email', 'Email Templates')], max_length=50)),
                ('content', models.TextField(blank=True)),
                ('file_url', models.URLField(blank=True)),
                ('preview_image_url', models.URLField(blank=True)),
                ('tags', models.JSONField(default=list)),
                ('is_premium', models.BooleanField(default=False)),
                ('download_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contributed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-download_count', '-created_at'],
                'indexes': [models.Index(fields=['category', '-download_count'], name='connect_res_categor_e6fd9c_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='space',
            index=models.Index(fields=['-member_count'], name='connect_spa_member__d38a0a_idx'),
        ),
        migrations.AddIndex(
            model_name='space',
            index=models.Index(fields=['slug'], name='connect_spa_slug_ed03fc_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['start_datetime', 'is_published'], name='connect_eve_start_d_7ceb18_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['host', '-created_at'], name='connect_eve_host_id_2d20bb_idx'),
        ),
        migrations.AddIndex(
            model_name='spacemembership',
            index=models.Index(fields=['user', '-joined_at'], name='connect_spa_user_id_165404_idx'),
        ),
        migrations.AddIndex(
            model_name='spacemembership',
            index=models.Index(fields=['space', 'role'], name='connect_spa_space_i_128e46_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='spacemembership',
            unique_together={('space', 'user')},
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['-reputation_score'], name='connect_use_reputat_b5bae7_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['-last_seen'], name='connect_use_last_se_5311f6_idx'),
        ),
    ]
