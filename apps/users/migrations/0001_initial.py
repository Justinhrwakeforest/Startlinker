# Generated by Django 5.2.4 on 2025-08-22 10:28

import apps.users.models
import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('jobs', '0001_initial'),
        ('posts', '0001_initial'),
        ('startups', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('username', models.CharField(help_text='Required. 3-20 characters. Letters, numbers, underscores and dots only.', max_length=20, unique=True, validators=[apps.users.models.validate_username])),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(blank=True, help_text='Your first name. Only letters, spaces, hyphens, and apostrophes allowed.', max_length=30, validators=[apps.users.models.validate_first_name])),
                ('last_name', models.CharField(blank=True, help_text='Your last name. Only letters, spaces, hyphens, and apostrophes allowed.', max_length=30, validators=[apps.users.models.validate_last_name])),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('profile_picture', models.ImageField(blank=True, help_text='Profile picture', null=True, upload_to=apps.users.models.user_profile_picture_upload_path)),
                ('is_premium', models.BooleanField(default=False)),
                ('follower_count', models.PositiveIntegerField(default=0)),
                ('following_count', models.PositiveIntegerField(default=0)),
                ('subscription_status', models.CharField(choices=[('free', 'Free'), ('pro', 'Pro'), ('enterprise', 'Enterprise')], default='free', max_length=20)),
                ('stripe_customer_id', models.CharField(blank=True, max_length=255, null=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(max_length=300)),
                ('category', models.CharField(choices=[('profile', 'Profile Completion'), ('social', 'Social Engagement'), ('content', 'Content Creation'), ('networking', 'Networking'), ('startup', 'Startup Activities'), ('jobs', 'Job Activities'), ('special', 'Special Events')], max_length=20)),
                ('rarity', models.CharField(choices=[('common', 'Common'), ('uncommon', 'Uncommon'), ('rare', 'Rare'), ('epic', 'Epic'), ('legendary', 'Legendary')], default='common', max_length=20)),
                ('icon', models.CharField(default='üèÜ', max_length=50)),
                ('color', models.CharField(default='#FFD700', max_length=7)),
                ('image', models.ImageField(blank=True, null=True, upload_to='achievements/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'svg'])])),
                ('requirements', models.JSONField(default=dict, help_text='JSON object defining achievement requirements')),
                ('points', models.PositiveIntegerField(default=10)),
                ('badge_text', models.CharField(blank=True, max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('is_secret', models.BooleanField(default=False)),
                ('is_repeatable', models.BooleanField(default=False)),
                ('earned_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['category', 'rarity', 'name'],
                'indexes': [models.Index(fields=['category', 'is_active'], name='users_achie_categor_737747_idx'), models.Index(fields=['rarity', '-earned_count'], name='users_achie_rarity_3984ef_idx')],
            },
        ),
        migrations.CreateModel(
            name='CollaborationCollaborator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission_level', models.CharField(choices=[('view', 'Can View'), ('comment', 'Can Comment'), ('edit', 'Can Edit'), ('admin', 'Admin Access')], default='edit', max_length=10)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('added_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='added_collaborators', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StartupCollaboration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, max_length=500)),
                ('collaboration_type', models.CharField(choices=[('public', 'Public Collaboration'), ('private', 'Private Collaboration'), ('collaborative', 'Collaborative Collaboration')], default='public', max_length=20)),
                ('project_type', models.CharField(choices=[('collection', 'Startup Collection'), ('project', 'Collaboration Project'), ('startup', 'Startup Development'), ('research', 'Research Project'), ('hackathon', 'Hackathon Team'), ('networking', 'Networking Group'), ('mentorship', 'Mentorship Circle')], default='collection', max_length=20)),
                ('status', models.CharField(choices=[('planning', 'Planning'), ('active', 'Active'), ('on_hold', 'On Hold'), ('completed', 'Completed'), ('archived', 'Archived')], default='active', max_length=20)),
                ('goals', models.TextField(blank=True, help_text='Project goals and objectives', max_length=1000)),
                ('requirements', models.TextField(blank=True, help_text='Skills and resources needed', max_length=1000)),
                ('timeline', models.JSONField(blank=True, default=dict, help_text='Project milestones and deadlines')),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('max_team_size', models.PositiveIntegerField(default=10, help_text='Maximum number of collaborators')),
                ('skills_needed', models.JSONField(blank=True, default=list, help_text='List of required skills')),
                ('communication_methods', models.JSONField(blank=True, default=list, help_text='Preferred communication methods (email, slack, discord, etc.)')),
                ('meeting_frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('biweekly', 'Bi-weekly'), ('monthly', 'Monthly'), ('as_needed', 'As Needed')], default='weekly', max_length=20)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Extended metadata for the collaboration including resources, tools, progress tracking, etc.')),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='collaborations/covers/%Y/%m/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'webp'])])),
                ('theme_color', models.CharField(default='#3B82F6', max_length=7)),
                ('is_featured', models.BooleanField(default=False)),
                ('allow_comments', models.BooleanField(default=True)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('follower_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('collaborators', models.ManyToManyField(blank=True, related_name='collaborated_collaborations', through='users.CollaborationCollaborator', through_fields=('collaboration', 'user'), to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='startup_collaborations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectTask',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, max_length=1000)),
                ('status', models.CharField(choices=[('todo', 'To Do'), ('in_progress', 'In Progress'), ('review', 'Under Review'), ('completed', 'Completed'), ('blocked', 'Blocked')], default='todo', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('estimated_hours', models.PositiveIntegerField(blank=True, null=True)),
                ('actual_hours', models.PositiveIntegerField(blank=True, null=True)),
                ('attachments', models.JSONField(blank=True, default=list, help_text='List of file attachments')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tasks', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_tasks', to=settings.AUTH_USER_MODEL)),
                ('depends_on', models.ManyToManyField(blank=True, related_name='blocking_tasks', to='users.projecttask')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='users.startupcollaboration')),
            ],
            options={
                'ordering': ['priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectMilestone',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, max_length=1000)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('delayed', 'Delayed'), ('cancelled', 'Cancelled')], default='planned', max_length=20)),
                ('target_date', models.DateField()),
                ('completed_date', models.DateField(blank=True, null=True)),
                ('progress_percentage', models.PositiveIntegerField(default=0, help_text='0-100%')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_milestones', to=settings.AUTH_USER_MODEL)),
                ('depends_on', models.ManyToManyField(blank=True, related_name='blocking_milestones', to='users.projectmilestone')),
                ('related_tasks', models.ManyToManyField(blank=True, related_name='milestones', to='users.projecttask')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to='users.startupcollaboration')),
            ],
            options={
                'ordering': ['target_date'],
            },
        ),
        migrations.CreateModel(
            name='ProjectMeeting',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, max_length=1000)),
                ('agenda', models.TextField(blank=True, max_length=2000)),
                ('scheduled_at', models.DateTimeField()),
                ('duration_minutes', models.PositiveIntegerField(default=60)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('meeting_url', models.URLField(blank=True, help_text='Zoom, Meet, or other meeting link')),
                ('location', models.CharField(blank=True, help_text='Physical location or virtual platform', max_length=200)),
                ('notes', models.TextField(blank=True, max_length=5000)),
                ('action_items', models.JSONField(blank=True, default=list)),
                ('recording_url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attendees', models.ManyToManyField(blank=True, related_name='project_meetings', to=settings.AUTH_USER_MODEL)),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organized_meetings', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meetings', to='users.startupcollaboration')),
            ],
            options={
                'ordering': ['scheduled_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectFile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, max_length=500)),
                ('category', models.CharField(choices=[('document', 'Document'), ('presentation', 'Presentation'), ('spreadsheet', 'Spreadsheet'), ('image', 'Image'), ('video', 'Video'), ('code', 'Code'), ('other', 'Other')], default='other', max_length=20)),
                ('file', models.FileField(upload_to='collaboration/files/%Y/%m/%d/')),
                ('file_size', models.PositiveIntegerField(default=0)),
                ('file_type', models.CharField(blank=True, max_length=50)),
                ('version', models.CharField(default='1.0', max_length=20)),
                ('is_latest', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=False)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('download_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('previous_version', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.projectfile')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploaded_files', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_files', to='users.startupcollaboration')),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='CollaborationItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('custom_note', models.TextField(blank=True, max_length=300)),
                ('custom_tags', models.JSONField(blank=True, default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('position', models.PositiveIntegerField(default=0)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('added_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('startup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collaboration_items', to='startups.startup')),
                ('collaboration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='users.startupcollaboration')),
            ],
            options={
                'ordering': ['position', '-added_at'],
            },
        ),
        migrations.CreateModel(
            name='CollaborationInvite',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message', models.TextField(blank=True, max_length=500)),
                ('role_description', models.CharField(blank=True, max_length=200)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('permission_level', models.CharField(choices=[('view', 'Can View'), ('comment', 'Can Comment'), ('edit', 'Can Edit'), ('admin', 'Admin Access')], default='edit', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('invitee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_invites', to=settings.AUTH_USER_MODEL)),
                ('inviter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_invites', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invites', to='users.startupcollaboration')),
            ],
        ),
        migrations.CreateModel(
            name='CollaborationFollow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('followed_at', models.DateTimeField(auto_now_add=True)),
                ('notify_on_updates', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followed_collaborations', to=settings.AUTH_USER_MODEL)),
                ('collaboration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collaboration_followers', to='users.startupcollaboration')),
            ],
        ),
        migrations.AddField(
            model_name='collaborationcollaborator',
            name='collaboration',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.startupcollaboration'),
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('story_type', models.CharField(choices=[('text', 'Text Story'), ('image', 'Image Story'), ('video', 'Video Story'), ('link', 'Link Story'), ('achievement', 'Achievement Story')], default='text', max_length=20)),
                ('text_content', models.TextField(blank=True, max_length=500)),
                ('image', models.ImageField(blank=True, null=True, upload_to='stories/images/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'gif', 'webp'])])),
                ('video', models.FileField(blank=True, null=True, upload_to='stories/videos/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['mp4', 'webm', 'mov'])])),
                ('link_url', models.URLField(blank=True)),
                ('link_title', models.CharField(blank=True, max_length=200)),
                ('link_description', models.TextField(blank=True, max_length=300)),
                ('is_active', models.BooleanField(default=True)),
                ('expires_at', models.DateTimeField()),
                ('background_color', models.CharField(default='#3B82F6', max_length=7)),
                ('text_color', models.CharField(default='#FFFFFF', max_length=7)),
                ('video_metadata', models.JSONField(blank=True, default=dict, help_text='JSON object containing video editing settings like trim, filters, overlays')),
                ('image_metadata', models.JSONField(blank=True, default=dict, help_text='JSON object containing image editing settings like filters, transforms, overlays')),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stories', to=settings.AUTH_USER_MODEL)),
                ('related_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stories', to='jobs.job')),
                ('related_startup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stories', to='startups.startup')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StoryView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('view_duration', models.PositiveIntegerField(default=0)),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='story_views', to='users.story')),
                ('viewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='story_views', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TaskComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(max_length=1000)),
                ('attachments', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='users.projecttask')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('progress_data', models.JSONField(blank=True, default=dict)),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to='users.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-earned_at'],
            },
        ),
        migrations.CreateModel(
            name='UserAchievementProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_progress', models.JSONField(default=dict)),
                ('progress_percentage', models.FloatField(default=0.0)),
                ('is_completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievement_progress', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserFollow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('notify_on_posts', models.BooleanField(default=True)),
                ('notify_on_stories', models.BooleanField(default=True)),
                ('notify_on_achievements', models.BooleanField(default=False)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL)),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserInterest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interest', models.CharField(max_length=50)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interests', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserLoginStreak',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_streak', models.PositiveIntegerField(default=0)),
                ('longest_streak', models.PositiveIntegerField(default=0)),
                ('last_login_date', models.DateField(blank=True, null=True)),
                ('total_login_days', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='login_streak', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserPoints',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_points', models.PositiveIntegerField(default=0)),
                ('lifetime_points', models.PositiveIntegerField(default=0)),
                ('points_this_month', models.PositiveIntegerField(default=0)),
                ('points_this_week', models.PositiveIntegerField(default=0)),
                ('achievement_points', models.PositiveIntegerField(default=0)),
                ('content_points', models.PositiveIntegerField(default=0)),
                ('social_points', models.PositiveIntegerField(default=0)),
                ('startup_points', models.PositiveIntegerField(default=0)),
                ('job_points', models.PositiveIntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('last_weekly_reset', models.DateTimeField(auto_now_add=True)),
                ('last_monthly_reset', models.DateTimeField(auto_now_add=True)),
                ('level', models.PositiveIntegerField(default=1)),
                ('level_progress', models.FloatField(default=0.0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='points', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_notifications', models.BooleanField(default=True)),
                ('push_notifications', models.BooleanField(default=True)),
                ('marketing_emails', models.BooleanField(default=False)),
                ('weekly_digest', models.BooleanField(default=True)),
                ('job_alerts', models.BooleanField(default=True)),
                ('startup_updates', models.BooleanField(default=True)),
                ('profile_visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private'), ('friends', 'Friends Only')], default='public', max_length=10)),
                ('show_activity', models.BooleanField(default=True)),
                ('show_bookmarks', models.BooleanField(default=False)),
                ('show_ratings', models.BooleanField(default=True)),
                ('allow_messages', models.BooleanField(default=True)),
                ('theme', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark'), ('auto', 'Auto')], default='light', max_length=10)),
                ('language', models.CharField(choices=[('en', 'English'), ('es', 'Spanish'), ('fr', 'French'), ('de', 'German')], default='en', max_length=10)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('items_per_page', models.IntegerField(default=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Settings',
                'verbose_name_plural': 'User Settings',
            },
        ),
        migrations.CreateModel(
            name='PointsHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField()),
                ('reason', models.CharField(choices=[('achievement', 'Achievement Unlocked'), ('signup_bonus', 'Welcome Bonus'), ('email_verify', 'Email Verified'), ('phone_verify', 'Phone Verified'), ('profile_picture_upload', 'Profile Picture Added'), ('profile_bio_complete', 'Bio Added'), ('profile_location_add', 'Location Added'), ('profile_website_add', 'Website Added'), ('profile_complete', 'Profile Completed'), ('first_interests_select', 'Interests Selected'), ('daily_login', 'Daily Login'), ('login_streak_3', '3-Day Login Streak'), ('login_streak_7', '7-Day Login Streak'), ('login_streak_30', '30-Day Login Streak'), ('first_session', 'First Platform Visit'), ('first_post', 'First Post Created'), ('post_create', 'Post Created'), ('post_with_image', 'Post with Image'), ('post_with_video', 'Post with Video'), ('first_story', 'First Story Created'), ('story_create', 'Story Created'), ('story_with_media', 'Story with Media'), ('comment_create', 'Comment Added'), ('first_comment', 'First Comment'), ('first_startup_submit', 'First Startup Submitted'), ('startup_submit', 'Startup Submitted'), ('startup_claim', 'Startup Claimed'), ('startup_verify', 'Startup Verified'), ('startup_update', 'Startup Updated'), ('startup_logo_upload', 'Startup Logo Added'), ('first_job_post', 'First Job Posted'), ('job_post', 'Job Posted'), ('job_apply', 'Applied for Job'), ('job_bookmark', 'Job Bookmarked'), ('resume_upload', 'Resume Uploaded'), ('resume_update', 'Resume Updated'), ('first_follow', 'First User Followed'), ('follow_user', 'User Followed'), ('get_followed', 'Gained Follower'), ('like_post', 'Post Liked'), ('share_post', 'Post Shared'), ('bookmark_post', 'Post Bookmarked'), ('join_community', 'Community Joined'), ('message_send', 'Message Sent'), ('first_message', 'First Message Sent'), ('milestone_10_posts', '10 Posts Milestone'), ('milestone_50_posts', '50 Posts Milestone'), ('milestone_100_followers', '100 Followers Milestone'), ('milestone_verified', 'Account Verified'), ('weekly_bonus', 'Weekly Activity Bonus'), ('monthly_bonus', 'Monthly Activity Bonus'), ('referral', 'User Referred'), ('early_adopter', 'Early Adopter Bonus'), ('beta_tester', 'Beta Tester Bonus'), ('feedback_submit', 'Feedback Submitted'), ('bug_report', 'Bug Reported'), ('posting_streak_7', '7-Day Posting Streak'), ('posting_streak_30', '30-Day Posting Streak'), ('engagement_streak_7', '7-Day Engagement Streak'), ('platform_anniversary', 'Platform Anniversary'), ('quality_content', 'Quality Content'), ('helpful_comment', 'Helpful Comment'), ('mentor_activity', 'Mentoring Activity'), ('event_participation', 'Event Participation'), ('survey_complete', 'Survey Completed'), ('other', 'Other Activity')], max_length=30)),
                ('description', models.CharField(max_length=200)),
                ('post_id', models.UUIDField(blank=True, null=True)),
                ('startup_id', models.UUIDField(blank=True, null=True)),
                ('job_id', models.UUIDField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('achievement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='users_point_user_id_3e8d18_idx'), models.Index(fields=['reason', '-created_at'], name='users_point_reason_f0a7ac_idx')],
            },
        ),
        migrations.CreateModel(
            name='Resume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Give your resume a descriptive title (e.g., 'Software Engineer Resume', 'Marketing Resume')", max_length=100)),
                ('file', models.FileField(help_text='Upload your resume (PDF, DOC, DOCX)', upload_to=apps.users.models.user_resume_upload_path)),
                ('is_default', models.BooleanField(default=False, help_text='Set as default resume for job applications')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('file_size', models.IntegerField(blank=True, null=True)),
                ('file_type', models.CharField(blank=True, max_length=50)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resumes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-is_default', '-uploaded_at'],
                'indexes': [models.Index(fields=['user', '-uploaded_at'], name='users_resum_user_id_8ccfbc_idx'), models.Index(fields=['user', 'is_default'], name='users_resum_user_id_fc6e4f_idx')],
            },
        ),
        migrations.CreateModel(
            name='ScheduledPost',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('content', models.TextField()),
                ('post_type', models.CharField(choices=[('discussion', 'Discussion'), ('question', 'Question'), ('announcement', 'Announcement'), ('resource', 'Resource'), ('event', 'Event')], default='discussion', max_length=20)),
                ('scheduled_for', models.DateTimeField()),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('published', 'Published'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('images_data', models.JSONField(blank=True, default=list)),
                ('links_data', models.JSONField(blank=True, default=list)),
                ('topics_data', models.JSONField(blank=True, default=list)),
                ('is_anonymous', models.BooleanField(default=False)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheduled_posts', to=settings.AUTH_USER_MODEL)),
                ('published_post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scheduled_from', to='posts.post')),
                ('related_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='jobs.job')),
                ('related_startup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='startups.startup')),
            ],
            options={
                'ordering': ['scheduled_for'],
                'indexes': [models.Index(fields=['author', 'status', 'scheduled_for'], name='users_sched_author__5a6333_idx'), models.Index(fields=['status', 'scheduled_for'], name='users_sched_status_72d098_idx'), models.Index(fields=['-created_at'], name='users_sched_created_bacc4f_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='startupcollaboration',
            index=models.Index(fields=['owner', '-created_at'], name='users_start_owner_i_006772_idx'),
        ),
        migrations.AddIndex(
            model_name='startupcollaboration',
            index=models.Index(fields=['collaboration_type', '-updated_at'], name='users_start_collabo_6af65a_idx'),
        ),
        migrations.AddIndex(
            model_name='startupcollaboration',
            index=models.Index(fields=['is_featured', '-updated_at'], name='users_start_is_feat_0f0409_idx'),
        ),
        migrations.AddIndex(
            model_name='startupcollaboration',
            index=models.Index(fields=['project_type', '-updated_at'], name='users_start_project_4985a0_idx'),
        ),
        migrations.AddIndex(
            model_name='startupcollaboration',
            index=models.Index(fields=['status', '-updated_at'], name='users_start_status_d4b411_idx'),
        ),
        migrations.AddIndex(
            model_name='startupcollaboration',
            index=models.Index(fields=['start_date'], name='users_start_start_d_e0ebc7_idx'),
        ),
        migrations.AddIndex(
            model_name='startupcollaboration',
            index=models.Index(fields=['end_date'], name='users_start_end_dat_92fdbf_idx'),
        ),
        migrations.AddIndex(
            model_name='projecttask',
            index=models.Index(fields=['project', 'status'], name='users_proje_project_30c1b2_idx'),
        ),
        migrations.AddIndex(
            model_name='projecttask',
            index=models.Index(fields=['assigned_to', 'status'], name='users_proje_assigne_d6e2b9_idx'),
        ),
        migrations.AddIndex(
            model_name='projecttask',
            index=models.Index(fields=['due_date'], name='users_proje_due_dat_8079cb_idx'),
        ),
        migrations.AddIndex(
            model_name='projectmilestone',
            index=models.Index(fields=['project', 'target_date'], name='users_proje_project_15ed6c_idx'),
        ),
        migrations.AddIndex(
            model_name='projectmilestone',
            index=models.Index(fields=['status', 'target_date'], name='users_proje_status_12d583_idx'),
        ),
        migrations.AddIndex(
            model_name='projectmeeting',
            index=models.Index(fields=['project', 'scheduled_at'], name='users_proje_project_7e1a44_idx'),
        ),
        migrations.AddIndex(
            model_name='projectmeeting',
            index=models.Index(fields=['organizer', 'scheduled_at'], name='users_proje_organiz_d24abc_idx'),
        ),
        migrations.AddIndex(
            model_name='projectfile',
            index=models.Index(fields=['project', '-updated_at'], name='users_proje_project_bdc6a6_idx'),
        ),
        migrations.AddIndex(
            model_name='projectfile',
            index=models.Index(fields=['category', '-updated_at'], name='users_proje_categor_ad64f7_idx'),
        ),
        migrations.AddIndex(
            model_name='collaborationitem',
            index=models.Index(fields=['collaboration', 'position'], name='users_colla_collabo_d7016f_idx'),
        ),
        migrations.AddIndex(
            model_name='collaborationitem',
            index=models.Index(fields=['startup', '-added_at'], name='users_colla_startup_cf3a11_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='collaborationitem',
            unique_together={('collaboration', 'startup')},
        ),
        migrations.AddIndex(
            model_name='collaborationinvite',
            index=models.Index(fields=['invitee', 'status'], name='users_colla_invitee_3ddf89_idx'),
        ),
        migrations.AddIndex(
            model_name='collaborationinvite',
            index=models.Index(fields=['project', 'status'], name='users_colla_project_0a4ce2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='collaborationinvite',
            unique_together={('project', 'invitee')},
        ),
        migrations.AddIndex(
            model_name='collaborationfollow',
            index=models.Index(fields=['user', '-followed_at'], name='users_colla_user_id_9ea4f8_idx'),
        ),
        migrations.AddIndex(
            model_name='collaborationfollow',
            index=models.Index(fields=['collaboration', '-followed_at'], name='users_colla_collabo_264edd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='collaborationfollow',
            unique_together={('user', 'collaboration')},
        ),
        migrations.AlterUniqueTogether(
            name='collaborationcollaborator',
            unique_together={('collaboration', 'user')},
        ),
        migrations.AddIndex(
            model_name='story',
            index=models.Index(fields=['author', '-created_at'], name='users_story_author__63f423_idx'),
        ),
        migrations.AddIndex(
            model_name='story',
            index=models.Index(fields=['is_active', 'expires_at'], name='users_story_is_acti_0dd578_idx'),
        ),
        migrations.AddIndex(
            model_name='story',
            index=models.Index(fields=['-created_at', 'is_active'], name='users_story_created_16e73c_idx'),
        ),
        migrations.AddIndex(
            model_name='storyview',
            index=models.Index(fields=['story', '-viewed_at'], name='users_story_story_i_da6423_idx'),
        ),
        migrations.AddIndex(
            model_name='storyview',
            index=models.Index(fields=['viewer', '-viewed_at'], name='users_story_viewer__6171e9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='storyview',
            unique_together={('story', 'viewer')},
        ),
        migrations.AddIndex(
            model_name='taskcomment',
            index=models.Index(fields=['task', '-created_at'], name='users_taskc_task_id_762cdd_idx'),
        ),
        migrations.AddIndex(
            model_name='userachievement',
            index=models.Index(fields=['user', '-earned_at'], name='users_usera_user_id_5cbb50_idx'),
        ),
        migrations.AddIndex(
            model_name='userachievement',
            index=models.Index(fields=['achievement', '-earned_at'], name='users_usera_achieve_74fb7c_idx'),
        ),
        migrations.AddIndex(
            model_name='userachievement',
            index=models.Index(fields=['user', 'is_pinned', 'is_public'], name='users_usera_user_id_ef72b9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userachievement',
            unique_together={('user', 'achievement')},
        ),
        migrations.AddIndex(
            model_name='userachievementprogress',
            index=models.Index(fields=['user', 'is_completed'], name='users_usera_user_id_35da79_idx'),
        ),
        migrations.AddIndex(
            model_name='userachievementprogress',
            index=models.Index(fields=['achievement', '-progress_percentage'], name='users_usera_achieve_9bac55_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userachievementprogress',
            unique_together={('user', 'achievement')},
        ),
        migrations.AddIndex(
            model_name='userfollow',
            index=models.Index(fields=['follower', '-created_at'], name='users_userf_followe_b6d69c_idx'),
        ),
        migrations.AddIndex(
            model_name='userfollow',
            index=models.Index(fields=['following', '-created_at'], name='users_userf_followi_dddc36_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userfollow',
            unique_together={('follower', 'following')},
        ),
        migrations.AlterUniqueTogether(
            name='userinterest',
            unique_together={('user', 'interest')},
        ),
        migrations.AddIndex(
            model_name='userloginstreak',
            index=models.Index(fields=['user', '-current_streak'], name='users_userl_user_id_0a115f_idx'),
        ),
        migrations.AddIndex(
            model_name='userloginstreak',
            index=models.Index(fields=['-longest_streak'], name='users_userl_longest_2e02bd_idx'),
        ),
        migrations.AddIndex(
            model_name='userpoints',
            index=models.Index(fields=['-total_points'], name='users_userp_total_p_b0e677_idx'),
        ),
        migrations.AddIndex(
            model_name='userpoints',
            index=models.Index(fields=['-lifetime_points'], name='users_userp_lifetim_9b6131_idx'),
        ),
        migrations.AddIndex(
            model_name='userpoints',
            index=models.Index(fields=['level', '-total_points'], name='users_userp_level_6beb15_idx'),
        ),
    ]
